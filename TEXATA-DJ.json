{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506793733811_-78041004","id":"20170930-174853_206686777","dateCreated":"2017-09-30T17:48:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20867","text":"%md\n# Hypothesis\n\nIn the remaining 1h and 18mn, I will train a computer to understand 1. the shortest path and 2. the most optimal path between a start song A and a song B in order to generate a playlist that will not melt my brain with rough song transitions. I assume that the playlist I will generate will lead you from classical music to a wonderful world of death metal without you even noticing you've be trapped that way.\n","dateUpdated":"2017-09-30T17:49:47+0000","dateFinished":"2017-09-30T17:49:47+0000","dateStarted":"2017-09-30T17:49:47+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Hypothesis</h1>\n<p>In the remaining 1h and 18mn, I will train a computer to understand 1. the shortest path and 2. the most optimal path between a start song A and a song B in order to generate a playlist that will not melt my brain with rough song transitions. I assume that the playlist I will generate will lead you from classical music to a wonderful world of death metal without you even noticing you&rsquo;ve be trapped that way.</p>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506793758042_-1678029434","id":"20170930-174918_769994599","dateCreated":"2017-09-30T17:49:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21003","text":"val df = spark.read.parquet(\"/user/antoine/listenbrainz-clean-catcat\")\ndf.printSchema","dateUpdated":"2017-09-30T18:06:17+0000","dateFinished":"2017-09-30T18:06:15+0000","dateStarted":"2017-09-30T18:06:15+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndf: org.apache.spark.sql.DataFrame = [user: string, artist: string ... 2 more fields]\nroot\n |-- user: string (nullable = true)\n |-- artist: string (nullable = true)\n |-- track: string (nullable = true)\n |-- timestamp: timestamp (nullable = true)\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506793857300_1538071298","id":"20170930-175057_1119281256","dateCreated":"2017-09-30T17:50:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21164","text":"import org.apache.spark.mllib.rdd.RDDFunctions._\n\nval df = spark.read.parquet(\"/user/antoine/listenbrainz-clean-catcat\")\nval transitions = df.map(r => {\n  (r.getAs[String](\"user\"), r.getAs[String](\"artist\") + \" - \" + r.getAs[String](\"track\"), r.getAs[java.sql.Timestamp](\"timestamp\").getTime)\n}).rdd.sortBy(s => (s._1, s._3)).sliding(2).filter(a => {\n  val a1 = a.head\n  val a2 = a.last\n  a1._1 == a2._1 && a2._3 < a1._3 + 15 * 60 * 1000L\n}).map({ a => \n  ((a.head._2, a.last._2), 1)\n}).reduceByKey(_+_).filter(a => (a._1._1 != a._1._2)).cache()","dateUpdated":"2017-09-30T18:23:00+0000","dateFinished":"2017-09-30T18:24:12+0000","dateStarted":"2017-09-30T18:23:00+0000","title":"Building sessions (no more than 15mn between songs)","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark.mllib.rdd.RDDFunctions._\n\ndf: org.apache.spark.sql.DataFrame = [user: string, artist: string ... 2 more fields]\n\ntransitions: org.apache.spark.rdd.RDD[((String, String), Int)] = MapPartitionsRDD[413] at filter at <console>:61\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506793772631_-474119477","id":"20170930-174932_1808384951","dateCreated":"2017-09-30T17:49:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21059","text":"transitions.sortBy(_._2, ascending = false).take(20).foreach(println)","dateUpdated":"2017-09-30T18:24:14+0000","dateFinished":"2017-09-30T18:25:54+0000","dateStarted":"2017-09-30T18:24:14+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"((ark - missing you,ark - silent is the rain),921)\n((radiohead - decks dark,radiohead - desert island disk),841)\n((radiohead - desert island disk,radiohead - ful stop),793)\n((radiohead - burn the witch,radiohead - daydreaming),786)\n((radiohead - glass eyes,radiohead - identikit),784)\n((radiohead - ful stop,radiohead - glass eyes),780)\n((radiohead - identikit,radiohead - the numbers),776)\n((radiohead - daydreaming,radiohead - decks dark),751)\n((radiohead - the numbers,radiohead - present tense),731)\n((radiohead - present tense,radiohead - tinker tailor soldier sailor rich man poor man beggar man thief),667)\n((sara bareilles - brave,sara bareilles - chasing the sun),633)\n((radiohead - tinker tailor soldier sailor rich man poor man beggar man thief,radiohead - true love waits),628)\n((aphex twin - spots,aphex twin - analogue bubblebath 3),627)\n((aphex twin - rhubarb,aphex twin - spots),599)\n((sara bareilles - eden,donna lewis - i love you always forever),595)\n((celtic woman - caledonia,celtic woman - mo ghile mear),569)\n((aphex twin - analogue bubblebath 3,aphex twin - mold),565)\n((aphex twin - mold,aphex twin - stone in focus),563)\n((celtic woman - the sky and the dawn and the sun,celtic woman - caledonia),559)\n((el ten eleven - sorry about your irony,el ten eleven - lorge),548)\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506794751389_-1562334386","id":"20170930-180551_1445568881","dateCreated":"2017-09-30T18:05:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21320","text":"import java.nio.charset.StandardCharsets\nimport com.google.common.hash.Hashing\n\nval VERTEX_ID: (String) => Long = (s: String) => {\n    Hashing.sha256().hashString(s, StandardCharsets.UTF_8).asLong()\n}\n\nimport org.apache.spark.graphx.{Edge, Graph}\nval vertices = transitions.keys.keys.union(transitions.keys.values).distinct.map(s => (VERTEX_ID(s), s))\nval edges = transitions.map({case ((from, to), count) => \n    Edge(VERTEX_ID(from), VERTEX_ID(to), count)\n})\n\nval graph = Graph.apply(vertices, edges).cache()\nprintln(s\"graph: V[${graph.vertices.count()}] E[${graph.edges.count()}]\")","dateUpdated":"2017-09-30T18:30:14+0000","dateFinished":"2017-09-30T18:31:21+0000","dateStarted":"2017-09-30T18:30:14+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport java.nio.charset.StandardCharsets\n\nimport com.google.common.hash.Hashing\n\nVERTEX_ID: String => Long = <function1>\n\nimport org.apache.spark.graphx.{Edge, Graph}\n\nvertices: org.apache.spark.rdd.RDD[(Long, String)] = MapPartitionsRDD[427] at map at <console>:60\n\nedges: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Int]] = MapPartitionsRDD[428] at map at <console>:60\n\ngraph: org.apache.spark.graphx.Graph[String,Int] = org.apache.spark.graphx.impl.GraphImpl@62c93c40\ngraph: V[2499944] E[8024757]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506794762869_1172091371","id":"20170930-180602_710075696","dateCreated":"2017-09-30T18:06:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21400","text":"// How many components in that graph\ngraph.connectedComponents().vertices.values.distinct().count()","dateUpdated":"2017-09-30T18:32:30+0000","dateFinished":"2017-09-30T18:36:16+0000","dateStarted":"2017-09-30T18:32:30+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres47: Long = 22010\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506796350466_-137644038","id":"20170930-183230_16770425","dateCreated":"2017-09-30T18:32:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22010","text":"vertices.filter(_._2.toLowerCase().contains(\"metal\")).take(20).foreach(println) // 1154612932651817562 //eagles of death metal - 9. the deuce\nvertices.filter(_._2.toLowerCase().contains(\"mozart\")).take(20).foreach(println) // -4621630949908535470 //wolfgang amadeus mozart - ii. kyrie eleison","dateUpdated":"2017-09-30T18:39:28+0000","dateFinished":"2017-09-30T18:39:30+0000","dateStarted":"2017-09-30T18:39:28+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"(2494277360033009097,sacred steel - impaled by metal)\n(2512599048724184340,pixelord - metal mutant)\n(1154612932651817562,eagles of death metal - 9. the deuce)\n(4486728591318775611,sabbat - black metal scythe)\n(812987639873830392,metal fingers - fenugreek)\n(426541850847317283,utopia - heavy metal kids [live - august 1975])\n(3293098149824462520,metallic falcons - pale dog)\n(8226205411609204886,metal church - the powers that be)\n(-8541614226815531243,leichtmetall - wir sind blumen)\n(279495583432700667,metallica - dragon)\n(8843466552369691218,schnitt acht - metal storm)\n(522797752174347391,eagles of death metal - high voltage)\n(6569365664815524819,leo - respect - metal cover)\n(-1765063473474688760,metalachi - crazy train)\n(-4875192895950101092,kmfdm - money (metal mix))\n(7486241286648168573,celldweller - so long sentiment (metal revision by paul udarov))\n(1478976474862870360,pig destroyer - sheet metal girl (remix))\n(11280005019123033,metallica - for whom the bells tolls)\n(-7452095998343631324,destruction - metal discharge)\n(7866624405416140016,the cog is dead - my metal boy)\n(7430066431557205326,wolfgang amadeus mozart - kv 366  idomeneo, r¨¨ di creta - 1780 - 29  atto secondo - coro, elettra: placido e il mar)\n(4544755887745480411,wolfgang amadeus mozart - symphony no. 25 in g, kv 183/173db: 2. andante)\n(8231334951670886176,mozart's sister - eternally girl - kane west remix)\n(-4621630949908535470,wolfgang amadeus mozart - ii. kyrie eleison)\n(-4494251060015780649,wolfgang amadeus mozart - divertimento no. 2 for 2 clarinets & basset horn, k. 439b/2/kv anh 229/2: v. rondo)\n(6078001248916552048,wolfgang amadeus mozart - symphony no. 41 in c major, k. 551 - “jupiter”: iii. menuetto. allegretto - trio)\n(3041994760921954237,wolfgang amadeus mozart - concerto for flute (on oboe) no. 2 in d major, k. 285d/314: i. allegro aperto)\n(-3401677301698553065,wolfgang amadeus mozart - mass no. 3 for soloists, chorus & orchestra in c major, k. 66 \"\"dominicusmesse\"\": xii. credo. \"\"et resurrexit\"\"\")\n(1165433827536787621,wolfgang amadeus mozart - violin concerto no. 5 in a, 2nd movement)\n(-745360362579174802,wolfgang amadeus mozart - symphony no. 14 in a, kv 114: 4. allegro molto)\n(-8323195507035190278,wolfgang amadeus mozart - quartet for strings no. 3 in g major, k. 134b/156 \"\"quartetti milanesi\"\": iii. tempo di minuetto\")\n(3349125263961957999,wolfgang amadeus mozart - concerto for horn and orchestra in eflat, k417 - rondo - allegro)\n(-7952471718376476694,wolfgang amadeus mozart - violin sonata no. 32 in b-flat major, k. 454: iii. allegretto)\n(-5896561109386600817,wolfgang amadeus mozart - idomeneo, rè di creta, k. 366: act i, scene viii. pantomima e recitativo \"\"ecco ci salvi alfin\"\" (idomeneo)\")\n(-471968246889452678,wolfgang amadeus mozart - requiem in d minor (mass no.19), k.626: ii. kyrie)\n(-6126253674155836756,wolfgang amadeus mozart - symphony no. 36 in c major, kv 425 'linzer' - 3. menuetto)\n(-6490265383410364324,the mozart effect orchestra - sonatina no. 1: iii. adagio)\n(8854764006120507733,clean bandit - mozart's house (xxxy remix))\n(-3057827473980585885,wolfgang amadeus mozart - die zauberflöte, k. 620: ouvertüre)\n(-5089868420096671174,wolfgang amadeus mozart - sonata for piano no. 11 in a major, k. 300i/331 \"\"alla turca\"\": iii. rondo alla turca. allegretto\")\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506796768008_-1144353477","id":"20170930-183928_1232953555","dateCreated":"2017-09-30T18:39:28+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22101","text":"    val seed = VERTEX_ID(\"-4621630949908535470\")\n    graph.outerJoinVertices(ShortestPaths.run(graph, Seq(seed)).vertices)((vid, vdata, optPath) => {\n      (vdata, optPath.getOrElse(seed, Int.MaxValue))\n    }).vertices.values\n","dateUpdated":"2017-09-30T18:41:43+0000","dateFinished":"2017-09-30T18:41:43+0000","dateStarted":"2017-09-30T18:41:43+0000","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nseed: Long = -7541669605125100189\n\n\n\n<console>:69: error: not found: value ShortestPaths\n           graph.outerJoinVertices(ShortestPaths.run(graph, Seq(seed)).vertices)((vid, vdata, optPath) => {\n                                   ^\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506796903408_-512444185","id":"20170930-184143_60567205","dateCreated":"2017-09-30T18:41:43+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22182"}],"name":"TEXATA-DJ","id":"2CW9RVT5V","angularObjects":{"2CWGX5A14:shared_process":[],"2CWPQHZEE:shared_process":[],"2CWXTY968:shared_process":[],"2CUN4E98D:shared_process":[],"2CVZACBFU:shared_process":[],"2CTHGMQ9W:shared_process":[],"2CWYBP451:shared_process":[],"2CUNAWHYY:shared_process":[],"2CU937NEU:shared_process":[],"2CV1T7WKV:shared_process":[],"2CUHNKF7G:shared_process":[],"2CWAXFHJY:shared_process":[],"2CVCJMKNZ:shared_process":[],"2CWYGPNPN:shared_process":[],"2CTZNT8QB:shared_process":[],"2CWNMJC2D:shared_process":[],"2CVXGFPJ9:shared_process":[],"2CVBKT1DC:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}